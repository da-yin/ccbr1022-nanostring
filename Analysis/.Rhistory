#write.csv(myCC_ORAs[["SH2_4mM-SCR_4mM"]], "myCC_ORAs_SH2_4mM-SCR_4mM.csv")
writeFile(myCC_ORAs[["SCR_4mM-SCR_0pt5mM"]], "myCC_ORAs_SCR_4mM-SCR_0pt5mM.csv")
myBP_ORAs = Map(function(x,y) enrichGO(gene = as.character(x$ensid_gene), universe = as.character(y$ensid_gene), OrgDb = org.Mm.eg.db,keyType='ENSEMBL', ont = "BP", pAdjustMethod = "BH", pvalueCutoff = 0.01, qvalueCutoff = 0.05,readable = TRUE), x=my_sig_degs, y=my_degs)
merge_result(list(SH1_SCR_0.5mM = myBP_ORAs[["SH1_0pt5mM-SCR_0pt5mM"]], SH2_SCR_0.5mM = myBP_ORAs[["SH2_0pt5mM-SCR_0pt5mM"]],SCR_4mM_SCR_0.5mM = myBP_ORAs[["SCR_4mM-SCR_0pt5mM"]])) %>%
dotplot(., showCategory=5) + ggtitle("biological process")+ scale_y_discrete(label=short_label)
knitr::opts_chunk$set(fig.width=14, fig.height=9)
#' Truncate string vector of ggplot axis label
#'
#' @param label    a ordered string vector
#' @param maxLen   max length of character (nchar) to show in label
#' @param maxWord  max count of words allowed to show in label
#' @param pattern  Word separater
#' @param dot      If true, three dots will added to truncated label
#'
#' @return a vector of truncated strings
#' @export
#'
#' @examples
short_label <- function(label, maxLen = 50, maxWord = 10, pattern = " ", dot = TRUE){
l <- strsplit(label, pattern)
short_label <- vector("character",length(l))
for (i in seq_along(l)){
truncated <- FALSE
s <- l[[i]]
if (length(s) > maxWord){
ll <- paste(s[1:maxWord], collapse = " ")
truncated <- TRUE
}
else{
ll <- paste(s, collapse = " ")
}
if (nchar(ll) > maxLen){
ll <- substr(ll, 1, maxLen)
truncated <- TRUE
}
if (dot & truncated) ll <- paste(ll, "...",sep = " ")
short_label[[i]] <- ll
}
attr(short_label, "pos") <- attr(label,"pos")
return(short_label)
}
myBP_ORAs = Map(function(x,y) enrichGO(gene = as.character(x$ensid_gene), universe = as.character(y$ensid_gene), OrgDb = org.Mm.eg.db,keyType='ENSEMBL', ont = "BP", pAdjustMethod = "BH", pvalueCutoff = 0.01, qvalueCutoff = 0.05,readable = TRUE), x=my_sig_degs, y=my_degs)
merge_result(list(SH1_SCR_0.5mM = myBP_ORAs[["SH1_0pt5mM-SCR_0pt5mM"]], SH2_SCR_0.5mM = myBP_ORAs[["SH2_0pt5mM-SCR_0pt5mM"]],SCR_4mM_SCR_0.5mM = myBP_ORAs[["SCR_4mM-SCR_0pt5mM"]])) %>%
dotplot(., showCategory=5) + ggtitle("biological process")+ scale_y_discrete(label=short_label)
# merge_result(list(SH1_SCR_0.5mM = myBP_ORAs[["SH1_0pt5mM-SCR_0pt5mM"]], SH2_SCR_0.5mM = myBP_ORAs[["SH2_0pt5mM-SCR_0pt5mM"]],
# SH1_SCR_4mM = myBP_ORAs[["SH1_4mM-SCR_4mM"]], SH2_SCR_4mM = myBP_ORAs[["SH2_4mM-SCR_4mM"]],
# SCR_4mM_SCR_0.5mM = myBP_ORAs[["SCR_4mM-SCR_0pt5mM"]])) %>% dotplot(., showCategory=5) + ggtitle("biological process")+ scale_y_discrete(label=short_label)
myCC_gsea = lapply(my_degs_rankingScoresList, function(x){
gseGO(geneList = x, OrgDb = org.Mm.eg.db, ont = "CC", nPerm = 30000, keyType = "ENSEMBL",
minGSSize = 10, maxGSSize = 500, pvalueCutoff = 0.05, pAdjustMethod = "BH",
verbose = TRUE)})
myBP_gsea = lapply(my_degs_rankingScoresList, function(x){
gseGO(geneList = x, OrgDb = org.Mm.eg.db, ont = "BP", nPerm = 30000, keyType = "ENSEMBL",
minGSSize = 10, maxGSSize = 500, pvalueCutoff = 0.05, pAdjustMethod = "BH",
verbose = TRUE)})
dotplot(myBP_gsea[["SH1_0pt5mM-SCR_0pt5mM"]], showCategory=10, split=".sign") + facet_grid(.~.sign)+ ggtitle("SH1_0pt5mM-SCR_0pt5mM BP gsea")
grid.draw(venn.plot_3Con0.5)
writeFile(myBP_ORAs[["SH1_0pt5mM-SCR_0pt5mM"]], "myBP_ORAs_SH1_0pt5mM-SCR_0pt5mM.csv")
writeFile(myBP_ORAs[["SH2_0pt5mM-SCR_0pt5mM"]], "myBP_ORAs_SH2_0pt5mM-SCR_0pt5mM.csv")
# write.csv(myBP_ORAs[["SH1_4mM-SCR_4mM"]], "myBP_ORAs_SH1_4mM-SCR_4mM.csv")
# write.csv(myBP_ORAs[["SH2_4mM-SCR_4mM"]], "myBP_ORAs_SH2_4mM-SCR_4mM.csv")
writeFile(myBP_ORAs[["SCR_4mM-SCR_0pt5mM"]], "myBP_ORAs_SCR_4mM-SCR_0pt5mM.csv")
myBP_ORAs[["SH1_0pt5mM-SCR_0pt5mM"]]
myCC_ORAs[["SH1_0pt5mM-SCR_0pt5mM"]]
my_sig_degs[["SH1_0pt5mM-SCR_0pt5mM"]]
my_sig_degs[["SH2_0pt5mM-SCR_0pt5mM"]]
my_sig_degs[["SH1_0pt5mM-SCR_0pt5mM"]]$gene
my_sig_degs[["SH2_0pt5mM-SCR_0pt5mM"]]$gene
my_sig_degs[["SH2_0pt5mM-SCR_0pt5mM"]]
my_sig_degs[["SH1_0pt5mM-SCR_0pt5mM"]]
my_degs$`SH1_0pt5mM-SCR_0pt5mM`
my_degs$`SH1_0pt5mM-SCR_0pt5mM`$gene
my_sig_degs[["SH1_0pt5mM-SCR_0pt5mM"]]
my_sig_degs[["SH1_0pt5mM-SCR_0pt5mM"]]
my_sig_degs[["SH1_0pt5mM-SCR_0pt5mM"]]$ensid_gene
my_degs[["SH1_0pt5mM-SCR_0pt5mM"]]
bpSH1test = enrichGO(gene = my_sig_degs[["SH1_0pt5mM-SCR_0pt5mM"]]$ensid_gene, universe = my_degs[["SH1_0pt5mM-SCR_0pt5mM"]]$ensid_gene, OrgDb = org.Mm.eg.db,keyType='ENSEMBL', ont = "BP", pAdjustMethod = "BH", pvalueCutoff = 0.01, qvalueCutoff = 0.05,readable = TRUE)
my_sig_degs[["SCR_4mM-SCR_0pt5mM"]]
my_sig_degs[["SCR_4mM-SCR_0pt5mM"]]
setwd("~/Desktop/active_projects/ccbr1016-Surajit-Sinha/pipeliner_limma/DEG/")
geneinfo = read.table("~/Desktop/active_projects/ccbrFiles/geneinfo.bed")
geneinfo$V5 = gsub('\\..*','', geneinfo$V5)
my_files <- list.files(path="~/Desktop/active_projects/ccbr1016-Surajit-Sinha/pipeliner_limma/DEG/input_files")
my_degs <- list()
for (i in my_files){
my_degs[[i]] <- read.table(i,header = TRUE,sep='\t')
my_degs[[i]]$ensid_gene <- gsub('\\..*','', my_degs[[i]]$ensid_gene)
}
names(my_degs) <- stringr::str_replace(my_files, pattern = "_all_genes.txt", replacement = "") %>%
stringr::str_replace(pattern = "limma_DEG_", replacement = "")
my_sig_degs = lapply(my_degs, function(x) subset(x, fdr < 0.05 & abs(fc) > 1.5))
my_degs_rankingScoresList <- lapply(my_degs, function(x){
scores <- x$gsea_ranking_score
names(scores) <- as.character(x$ensid_gene)
scores <- sort(scores, decreasing = T)
})
suppressMessages(library(biomaRt))
suppressMessages(library(biomaRt))
View(Entrez_all)
View(Entrez_from_symbol)
knitr::opts_chunk$set(echo = TRUE)
model1
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)  # data manipulation and visualization
library(modelr)     # provides easy pipeline modeling functions
library(broom)      # helps to tidy up model outputs
library("PerformanceAnalytics")
library("Hmisc")
# ++++++++++++++++++++++++++++
# flattenCorrMatrix
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
setwd("~/Desktop/active_projects/ml/advertising_lm")
advertising = read.csv("Advertising.csv")%>% select(-X)
head(advertising)
setwd("~/Desktop/active_projects/ml/advertising_lm")
advertising = read.csv("Advertising.csv")%>% select(-X)
res = rcorr(as.matrix(advertising))
flattenCorrMatrix(res$r, res$P)
chart.Correlation(advertising, histogram=TRUE, pch=19)
set.seed(123)
sample <- sample(c(TRUE, FALSE), nrow(advertising), replace = T, prob = c(0.6,0.4))
train <- advertising[sample, ]
test <- advertising[!sample, ]
model1 <- lm(sales ~ TV, data = train)
summary(model1)
model1
model1
model1_results <- augment(model1, train)
model1_results
?augment
model1_results <- augment(model1, train)
ggplot(model1_results, aes(.fitted, .resid)) +
geom_ref_line(h = 0) +
geom_point() +
geom_smooth(se = FALSE) +
ggtitle("Residuals vs Fitted")
setwd("~/Desktop/active_projects/ccbr1022-nanostring/Analysis/")
rawcounts = read.csv(file = "~/Desktop/active_projects/ccbr1022-nanostring/RawData/ccbr1022_rawcounts.csv", header = T)
colnames(rawcounts)
colnames(rawcounts) = gsub("X","",colnames(rawcounts))
counts = read.csv(file = "~/Desktop/active_projects/ccbr1022-nanostring/RawData/ccbr1022_rawcounts.csv", header = T)
colnames(counts) = gsub("X","",colnames(counts))
for (c in colnames(counts)){
if (is.integer(counts[[c]])){
counts[[c]] = (counts[[c]] * 1000)/sum(counts[[c]])
}
}
counts
counts_housekeeping = counts[which(counts$Code.Class=="Housekeeping"),]
counts_housekeeping
counts_housekeeping_tidy = melt(data = counts_housekeeping, value.name = "CPK", variable.name = "sample")
suppressMessages(library(Biobase))
suppressMessages(library(NanoStringDiff))
suppressMessages(library(enrichplot))
suppressMessages(library(dplyr))
suppressMessages(library(RColorBrewer))
suppressMessages(library(pheatmap))
suppressMessages(library(clusterProfiler))
suppressMessages(library(argparse))
suppressMessages(library(org.Hs.eg.db))
suppressMessages(library(org.Mm.eg.db))
suppressMessages(library(ReactomePA))
suppressMessages(library(ggplot2))
suppressMessages(library(EnhancedVolcano))
suppressMessages(library(ggfortify))
suppressMessages(library(ggrepel))
suppressMessages(library(VennDiagram))
suppressMessages(library(biomaRt))
suppressMessages(library(enrichplot))
suppressMessages(library(gridExtra))
suppressMessages(library(gplots))
suppressMessages(library(stringr))
suppressMessages(library(dplyr))
suppressMessages(library(reshape2))
suppressMessages(library(Glimma))
suppressMessages(library(ggpubr))
counts_housekeeping_tidy = melt(data = counts_housekeeping, value.name = "CPK", variable.name = "sample")
counts_housekeeping_tidy$cytopenia = str_sub(counts_housekeeping_tidy$sample, -4,-1)
housekeeping.genes = unique(counts_housekeeping_tidy$Name)
PlotHouse = function(gene){
df = counts_housekeeping_tidy[which(counts_housekeeping_tidy$Name==deparse(substitute(gene))),]
df_CPK = df$CPK
ggplot(data = counts_housekeeping_tidy[which(counts_housekeeping_tidy$Name==deparse(substitute(gene))),],
aes(x = sample, y=CPK, fill=cytopenia)) + geom_bar(stat="identity")+
theme(axis.text.x = element_text(angle = 0, hjust = 1))+ labs(title = deparse(substitute(gene)))+
geom_hline(yintercept = mean(df_CPK), color="blue")+geom_hline(yintercept = sd(df_CPK)+mean(df_CPK), color="red")+
geom_hline(yintercept =mean(df_CPK)-sd(df_CPK), color="red")
}
ggarrange(PlotHouse(ABCF1),PlotHouse(G6PD),PlotHouse(NRDE2),PlotHouse(OAZ1),PlotHouse(POLR2A),
PlotHouse(SDHA),PlotHouse(STK11IP),PlotHouse(TBC1D10B),PlotHouse(TBP),PlotHouse(UBB),
nrow = 5, ncol = 2)
rawcounts = read.csv(file = "~/Desktop/active_projects/ccbr1022-nanostring/RawData/ccbr1022_rawcounts.csv", header = T)
colnames(rawcounts) = gsub("X","",colnames(rawcounts))
severity = as.factor(str_sub(colnames(rawcounts)[4:ncol(rawcounts)], -4,-1))
severity
group = as.factor(ifelse(severity=="none", "notCytopenic", "cytopenic"))
group
patient = as.factor(str_sub(colnames(rawcounts)[4:ncol(rawcounts)], 7,8))
patient
colnames(rawcounts)
patient = as.factor(str_sub(colnames(rawcounts)[4:ncol(rawcounts)], 6,7))
patient
designs = data.frame(group, patient)
designs
nanostringdata <- createNanoStringSetFromCsv("~/Desktop/active_projects/ccbr1022-nanostring/RawData/ccbr1022_rawcounts.csv",
header = TRUE, designs)
NanoStringData <- createNanoStringSetFromCsv("~/Desktop/active_projects/ccbr1022-nanostring/RawData/ccbr1022_rawcounts.csv",
header = TRUE, designs)
#normalize raw data using positive, negative, and housekeeping factors
c = positiveFactor(NanoStringData)
d = housekeepingFactor(NanoStringData)
k = c * d
lamda_i = negativeFactor(NanoStringData)
Y = exprs(NanoStringData)
Y_n = sweep(Y, 2, lamda_i, FUN = "-")
Y_nph = sweep(Y_n, 2, k, FUN = "/")
colnames(Y_nph) = gsub("X","",colnames(Y_nph))
Y_nph[Y_nph <= 0] = 1
Y_nph_log <- log(Y_nph)
Y_nph_palantir = Y_nph
par(mar=c(10.1,4.1,4.1,2.1))
long_Y_nph = melt(Y_nph, value.name = "normalized_Counts", varnames=c('gene', 'sample'))
long_Y_nph$cytopenia = str_sub(long_Y_nph$sample, -4,-1)
long_Y_nph$cytopenia=as.factor(long_Y_nph$cytopenia)
box_long_Y_nph = ggplot(long_Y_nph, aes(x=sample, y=normalized_Counts, fill=cytopenia)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylim(0, 600)
box_long_Y_nph
long_Y_nph
Y_nph
#normalize raw data using positive, negative, and housekeeping factors
NanoStringData=estNormalizationFactors(NanoStringData)
c = positiveFactor(NanoStringData)
d = housekeepingFactor(NanoStringData)
k = c * d
lamda_i = negativeFactor(NanoStringData)
Y = exprs(NanoStringData)
Y_n = sweep(Y, 2, lamda_i, FUN = "-")
Y_nph = sweep(Y_n, 2, k, FUN = "/")
colnames(Y_nph) = gsub("X","",colnames(Y_nph))
Y_nph[Y_nph <= 0] = 1
Y_nph_log <- log(Y_nph)
Y_nph_palantir = Y_nph
par(mar=c(10.1,4.1,4.1,2.1))
long_Y_nph = melt(Y_nph, value.name = "normalized_Counts", varnames=c('gene', 'sample'))
long_Y_nph$cytopenia = str_sub(long_Y_nph$sample, -4,-1)
long_Y_nph$cytopenia=as.factor(long_Y_nph$cytopenia)
box_long_Y_nph = ggplot(long_Y_nph, aes(x=sample, y=normalized_Counts, fill=cytopenia)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylim(0, 600)
box_long_Y_nph
box_long_Y_nph = ggplot(long_Y_nph, aes(x=sample, y=normalized_Counts, fill=cytopenia)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylim(0, 300)
box_long_Y_nph
box_long_Y_nph = ggplot(long_Y_nph, aes(x=sample, y=normalized_Counts, fill=cytopenia)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) #+ ylim(0, 300)
box_long_Y_nph
box_long_Y_nph = ggplot(long_Y_nph, aes(x=sample, y=normalized_Counts, fill=cytopenia)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylim(0, 300)
plotCounts = function(count.data, count.name,){
long.table = melt(count.data, value.name = count.name, varnames=c('gene', 'sample'))
long.table$cytopenia = as.factor(str_sub(long.table$sample, -4,-1))
ggplot(long.table, aes(x=sample, y=value.name, fill=cytopenia)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylim(0, 300)
}
plotCounts = function(count.data, count.name){
long.table = melt(count.data, value.name = count.name, varnames=c('gene', 'sample'))
long.table$cytopenia = as.factor(str_sub(long.table$sample, -4,-1))
ggplot(long.table, aes(x=sample, y=value.name, fill=cytopenia)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylim(0, 300)
}
plotCounts(Y_nph)
plotCounts(count.data = Y_nph,count.name = normalized_counts)
plotCounts(count.data = Y_nph,count.name = "normalized_counts")
plotCounts = function(count.data, count.name){
long.table = melt(count.data, count.name, varnames=c('gene', 'sample'))
long.table$cytopenia = as.factor(str_sub(long.table$sample, -4,-1))
ggplot(long.table, aes(x=sample, y=value.name, fill=cytopenia)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylim(0, 300)
}
plotCounts(count.data = Y_nph,count.name = "normalized_counts")
plotCounts = function(count.data, count.name){
long.table = melt(count.data, value.name = count.name, varnames=c('gene', 'sample'))
long.table$cytopenia = as.factor(str_sub(long.table$sample, -4,-1))
ggplot(long.table, aes(x=sample, y=count.name, fill=cytopenia)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylim(0, 300)
}
plotCounts(count.data = Y_nph,count.name = "normalized_counts")
long_Y_nph$cytopenia
long_Y_nph$sample
plotCounts = function(count.data, count.name){
long.table = melt(count.data, value.name = count.name, varnames=c('gene', 'sample'))
long.table$cytopenia = str_sub(long.table$sample, -4,-1)
ggplot(long.table, aes(x=sample, y=count.name, fill=cytopenia)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylim(0, 300)
}
plotCounts(count.data = Y_nph,count.name = "normalized_counts")
pca_plot = function(data){
counts = data.frame(t(data))
counts$group = str_sub(rownames(counts), -4,-1)
df = counts[,1:ncol(counts)-1]
df = df[,apply(df,2,var)!= 0]
autoplot(prcomp(df, scale. = T), data = counts, colour= 'group',label=T,repel = TRUE,
label.size = 3,label.repel=T)
}
pca_plot(Y_nph)
DESeq2rawcounts = read.csv("~/Desktop/active_projects/ccbr1022-nanostring/RawData/ccbr1022_rawcounts.csv", header = T,row.names = 2)
DESeq2rawcounts
DESeq2rawcounts$Code.Class=NULL
DESeq2rawcounts$Accession=NULL
colnames(DESeq2rawcounts)=gsub("X","",colnames(DESeq2rawcounts))
metadata = read.csv("ccbr1022_metadata.csv", header = T)
metadata = read.csv("~/Desktop/active_projects/ccbr1022-nanostring/RawData/ccbr1022_metadata.csv", header = T)
DESeq2rawcounts$Code.Class=NULL
DESeq2rawcounts$Accession=NULL
colnames(DESeq2rawcounts)=gsub("X","",colnames(DESeq2rawcounts))
metadata$filename=NULL
rownames(metadata_post)
rownames(metadata)
#It is absolutely critical that the columns of the count matrix and the rows of the column data (information about samples) are in the same order
rownames(metadata) = metadata_post$sampleName
#It is absolutely critical that the columns of the count matrix and the rows of the column data (information about samples) are in the same order
rownames(metadata) = metadata$sampleName
rownames(metadata)
colnames(metadata)
all(rownames(metadata_post) == colnames(rawcounts_post))
all(rownames(metadata == colnames(DESeq2rawcounts))
all(rownames(metadata) == colnames(DESeq2rawcounts))
all(rownames(metadata) == colnames(DESeq2rawcounts))
rownames(metadata)
colnames(DESeq2rawcounts)
metadata
dds = DESeqDataSetFromMatrix(countData = DESeq2rawcounts,
colData = metadata,
design = ~ cytopenia + patient)
##############################use DESeq2 to choose new housekeeping genes#############################################
require(DESeq2)
dds = DESeqDataSetFromMatrix(countData = DESeq2rawcounts,
colData = metadata,
design = ~ cytopenia + patient)
dds
counts(dds)
dds
# filter out low count genes, total counts for each gene must be equal to lower quantile or higher
keep = rowSums(counts(dds)) >= quantile(rowSums(counts(dds)), probs=c(0.25))
dds = dds[keep,]
dds$condition <- relevel(dds$cytopenia, ref = "NotCytopenic")
dds = DESeq(dds)
res = results(dds)
res
# choose genes that has the largest P value, and above 50% expression level as new housekeeping genes
constant.genes = rownames(res[order(res$pvalue, decreasing = T),][1:100,])
constant.genes = intersect(constant.genes, rownames(rawcounts_post)[rowSums(rawcounts_post) >= quantile(rowSums(rawcounts_post), probs=c(0.5))])
constant.genes = intersect(constant.genes, rownames(DESeq2rawcounts)[rowSums(DESeq2rawcounts) >= quantile(rowSums(DESeq2rawcounts), probs=c(0.5))])
dim(new.housekeeping)
constant.genes
###swap out the default housekeeping genes with new calcualted housekeeping genes
rawcounts2 = read.csv("~/Desktop/active_projects/ccbr1022-nanostring/RawData/ccbr1022_rawcounts.csv", header = T)
colnames(rawcounts2)=gsub("X","",colnames(rawcounts2))
new.housekeeping = rawcounts2[(rawcounts2$Name%in%constant.genes),]
new.housekeeping
setdiff(constant.genes,rawcounts2$Name)
summary(rawcounts2$Code.Class)
new.housekeeping$Code.Class=as.factor("Housekeeping")
rawcounts2 = rawcounts2[which(rawcounts2$Code.Class!="Housekeeping"),]
rawcounts3= rbind(new.housekeeping,rawcounts2)
summary(rawcounts3$Code.Class)
write.csv(rawcounts3, "~/Desktop/active_projects/ccbr1022-nanostring/Analysis/processedData/ccbr1022_rawcounts_newHousekeeping.csv",
quote = F, row.names = F)
res
write.csv(res, "~/Desktop/active_projects/ccbr1022-nanostring/Analysis/processedData/DESeq2.res.csv",
quote = F, row.names = F)
designs
rawcounts = read.csv(file = "~/Desktop/active_projects/ccbr1022-nanostring/Analysis/processedData/ccbr1022_rawcounts_newHousekeeping.csv", header = T)
colnames(rawcounts) = gsub("X","",colnames(rawcounts))
severity = as.factor(str_sub(colnames(rawcounts)[4:ncol(rawcounts)], -4,-1))
group = as.factor(ifelse(severity=="none", "notCytopenic", "cytopenic"))
patient = as.factor(str_sub(colnames(rawcounts)[4:ncol(rawcounts)], 6,7))
designs = data.frame(group, patient)
NanoStringData <- createNanoStringSetFromCsv("~/Desktop/active_projects/ccbr1022-nanostring/Analysis/processedData/ccbr1022_rawcounts_newHousekeeping.csv",
header = TRUE, designs)
#normalize raw data using positive, negative, and housekeeping factors
NanoStringData=estNormalizationFactors(NanoStringData)
Result_cytopenia.vs.noCytopenia = glm.LRT(NanoStringData,design.full, Beta = 2)
pheno = pData(NanoStringData)[, c("group","patient")]
group = pheno$group
patient = pheno$patient
design.full = model.matrix(~group+patient)
#normalize raw data using positive, negative, and housekeeping factors
NanoStringData=estNormalizationFactors(NanoStringData)
Result_cytopenia.vs.noCytopenia = glm.LRT(NanoStringData,design.full, Beta = 2)
Result_cytopenia.vs.noCytopenia$table
#Because code automatically set "Cytopenia" as the baseline level of your covariant "group"
#It will not affect significant test, p-value and q-value. But for logFC, calculate it as -logFC of the output.
Result_cytopenia.vs.noCytopenia$table$logFC=Result_cytopenia.vs.noCytopenia$table$logFC * (-1)
Result_cytopenia.vs.noCytopenia$table
write.csv(Result_cytopenia.vs.noCytopenia$table, "~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/Result_cytopenia.vs.noCytopenia.csv")
DEG = Result_cytopenia.vs.noCytopenia$table
DEG$sig = ifelse(abs(DEG$logFC)>1 & DEG$qvalue<0.05, "sig","ns" )
DEG$gene = rownames(DEG)
normalized_log = data.frame(Y_nph_log)
normalized_log$ave_log = apply(normalized_log, 1, mean)
normalized_log$gene = rownames(normalized_log)
merged = merge(DEG, normalized_log, by="gene")
####
ggplot(merged, aes(x=merged$ave_log, y=merged$logFC, color=merged$sig, ,label=T,repel = TRUE))+ geom_point() + ylim(-70,70)+
xlab("log mean expression") + ylab("log fold change") + labs(title ="MA plot", col="DEG")+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14))
####
ggplot(merged, aes(x=merged$ave_log, y=merged$logFC, color=merged$sig, ,label=T,repel = TRUE))+ geom_point() + ylim(-40,40)+
xlab("log mean expression") + ylab("log fold change") + labs(title ="MA plot", col="DEG")+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14))
####
ggplot(merged, aes(x=merged$ave_log, y=merged$logFC, color=merged$sig, ,label=T,repel = TRUE))+ geom_point() + ylim(-40,40)+
xlab("log mean expression") + ylab("log fold change") + labs(title ="MD plot", col="DEG")+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14))
##label sig genes
ggplot(merged, aes(x=merged$ave_log, y=merged$logFC, color=merged$sig, ,label=T,repel = TRUE))+ geom_point() + ylim(-70,70)+
xlab("log mean expression") + ylab("log fold change") + labs(title ="MD plot", col="DEG")+
geom_text_repel(size = 3, segment.size = 0.8,aes(label= ifelse(merged$sig=='sig',merged$gene,"")))+
theme(axis.text=element_text(size=12),axis.title=element_text(size=14))
################generate heatmap of top DEG genes###############
normalized = data.frame(Y_nph)
colnames(normalized) = gsub("X","",colnames(normalized))
normalized$ave = apply(normalized, 1, mean)
normalized$gene = rownames(normalized)
merged2 = merge(DEG, normalized, by="gene")
merged2_sig = merged2[which(merged2$sig=="sig"),]
merged2_sig = merged2_sig[order(merged2_sig$qvalue, decreasing = F),]
rownames(merged2_sig)=merged2_sig$gene
merged2_sig_counts = subset(merged2_sig, select=-c(gene,logFC,lr,pvalue,qvalue,sig,ave))
heatmap.2(data.matrix(merged2_sig_counts[1:33,]),col=rev(morecols(50)),trace="none",
main="DEG genes across samples",scale="row",srtCol=20,cexCol=1,cexRow = 0.7)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
var_genes  = apply(Y_nph_palantir_batchCor, 1, var)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:200]
heatmap.2(data.matrix(merged2_sig_counts[1:33,]),col=rev(morecols(50)),trace="none",
main="DEG genes across samples",scale="row",srtCol=20,cexCol=1,cexRow = 0.7)
################generate heatmap of top DEG genes###############
normalized = data.frame(Y_nph)
colnames(normalized) = gsub("X","",colnames(normalized))
normalized$ave = apply(normalized, 1, mean)
normalized$gene = rownames(normalized)
mypalette <- brewer.pal(11,"RdYlBu")
morecols <- colorRampPalette(mypalette)
merged2 = merge(DEG, normalized, by="gene")
merged2_sig = merged2[which(merged2$sig=="sig"),]
merged2_sig = merged2_sig[order(merged2_sig$qvalue, decreasing = F),]
rownames(merged2_sig)=merged2_sig$gene
merged2_sig_counts = subset(merged2_sig, select=-c(gene,logFC,lr,pvalue,qvalue,sig,ave))
heatmap.2(data.matrix(merged2_sig_counts[1:33,]),col=rev(morecols(50)),trace="none",
main="DEG genes across samples",scale="row",srtCol=20,cexCol=1,cexRow = 0.7)
merged2_sig_counts
heatmap.2(data.matrix(merged2_sig_counts),col=rev(morecols(50)),trace="none",
main="DEG genes across samples",scale="row",srtCol=20,cexCol=1,cexRow = 0.7)
png(filename = "~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/normalizedCounts.png")
ggplot(long_Y_nph, aes(x=sample, y=normalized_Counts, fill=cytopenia)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylim(0, 300)
dev.off()
png(filename = "~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/normalizedCounts.png")
pdf(filename = "~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/normalizedCounts.png")
ggplot(long_Y_nph, aes(x=sample, y=normalized_Counts, fill=cytopenia)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylim(0, 300)
dev.off()
#png(filename = "~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/normalizedCounts.png")
pdf(filename = "~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/normalizedCounts.png")
#png(filename = "~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/normalizedCounts.png")
pdf(filename = "~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/normalizedCounts.pdf")
#png(filename = "~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/normalizedCounts.png")
pdf("~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/normalizedCounts.pdf")
ggplot(long_Y_nph, aes(x=sample, y=normalized_Counts, fill=cytopenia)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylim(0, 300)
dev.off()
pdf("~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/normalizedCounts_PCA.pdf")
pca_plot(Y_nph)
dev.off()
pdf("~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/housekeepingGenes.pdf")
ggarrange(PlotHouse(ABCF1),PlotHouse(G6PD),PlotHouse(NRDE2),PlotHouse(OAZ1),PlotHouse(POLR2A),
PlotHouse(SDHA),PlotHouse(STK11IP),PlotHouse(TBC1D10B),PlotHouse(TBP),PlotHouse(UBB),
nrow = 5, ncol = 2)
dev.off()
pdf("~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/MDplot.pdf")
ggplot(merged, aes(x=merged$ave_log, y=merged$logFC, color=merged$sig, ,label=T,repel = TRUE))+ geom_point() + ylim(-40,40)+
xlab("log mean expression") + ylab("log fold change") + labs(title ="MD plot", col="DEG")+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14))
dev.off()
pdf("~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/DEGheatmap.pdf")
heatmap.2(data.matrix(merged2_sig_counts),col=rev(morecols(50)),trace="none",
main="DEG genes across samples",scale="row",srtCol=20,cexCol=1,cexRow = 0.7)
dev.off()
##############save Rdata##################
save.image(file = "nanostring")
pdf("~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/DEGheatmap.pdf")
heatmap.2(data.matrix(merged2_sig_counts),col=rev(morecols(50)),trace="none",
main="DEG genes across samples",scale="row",srtCol=45,cexCol=1,cexRow = 0.7)
dev.off()
rownames(DEG)
jpeg(filename = "~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/normalizedCounts.jpeg")
#pdf("~/Desktop/active_projects/ccbr1022-nanostring/Analysis/Results/normalizedCounts.pdf")
ggplot(long_Y_nph, aes(x=sample, y=normalized_Counts, fill=cytopenia)) + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ylim(0, 300)
dev.off()
